/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	const Game = __webpack_require__(1);
	const canvas = document.getElementById('game');
	const context = canvas.getContext('2d');
	const game = new Game(context, canvas.width, canvas.height);
	const playerOneControls = document.getElementById('D_Pad_One');
	const playerTwoControls = document.getElementById('D_Pad_Two');
	document.addEventListener('keydown', game.firstBike.pOneDirection);
	document.addEventListener('keydown', game.secondBike.pTwoDirection);
	document.addEventListener('keydown', function (e) {
	  if (e.keyCode == 65) {
	    playerOneControls.src = "images/PlayerOneA.png";
	  }
	  if (e.keyCode == 87) {
	    playerOneControls.src = "images/PlayerOneW.png";
	  }
	  if (e.keyCode == 68) {
	    playerOneControls.src = "images/PlayerOneD.png";
	  }
	  if (e.keyCode == 83) {
	    playerOneControls.src = "images/PlayerOneS.png";
	  }
	
	  if (e.keyCode == 37) {
	    playerTwoControls.src = "images/PlayerTwoLeft.png";
	  }
	  if (e.keyCode == 38) {
	    playerTwoControls.src = "images/PlayerTwoUp.png";
	  }
	  if (e.keyCode == 39) {
	    playerTwoControls.src = "images/PlayerTwoRight.png";
	  }
	  if (e.keyCode == 40) {
	    playerTwoControls.src = "images/PlayerTwoDown.png";
	  }
	});
	document.addEventListener('keyup', function (e) {
	  if (e.keyCode == 65) {
	    playerOneControls.src = "images/PlayerOneDefault.png";
	  }
	  if (e.keyCode == 87) {
	    playerOneControls.src = "images/PlayerOneDefault.png";
	  }
	  if (e.keyCode == 68) {
	    playerOneControls.src = "images/PlayerOneDefault.png";
	  }
	  if (e.keyCode == 83) {
	    playerOneControls.src = "images/PlayerOneDefault.png";
	  }
	  if (e.keyCode == 37) {
	    playerTwoControls.src = "images/PlayerTwoDefault.png";
	  }
	  if (e.keyCode == 38) {
	    playerTwoControls.src = "images/PlayerTwoDefault.png";
	  }
	  if (e.keyCode == 39) {
	    playerTwoControls.src = "images/PlayerTwoDefault.png";
	  }
	  if (e.keyCode == 40) {
	    playerTwoControls.src = "images/PlayerTwoDefault.png";
	  }
	});
	document.addEventListener('keydown', game.secondBike.pTwoDirection);
	document.querySelector('#game').addEventListener('click', game.gameStart);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	const Bike = __webpack_require__(2);
	const canvas = document.getElementById('game');
	const context = canvas.getContext('2d');
	const gameTune = document.getElementById('game-tune');
	const explosionTune = document.getElementById('explosion-tune');
	const turnTune = document.getElementById('turn-tune');
	const playerOneLives = document.getElementById('player1_lives');
	const playerTwoLives = document.getElementById('player2_lives');
	gameTune.volume = 0.3;
	explosionTune.volume = 1;
	
	class Game {
	  constructor(context) {
	    this.context = context;
	    this.firstBike = new Bike(canvas.width * .07, canvas.height / 2, 10, 0, 3, 0, 'magenta');
	    this.secondBike = new Bike(canvas.width * .93, canvas.height / 2, 10, 0, -3, 0, 'cyan');
	    this.gameLoop = this.gameLoop.bind(this);
	    this.gameStart = this.gameStart.bind(this);
	    this.requestId = undefined;
	    this.gameTimeOut = 0;
	  }
	
	  gameStart() {
	    this.playAudio(gameTune);
	    requestAnimationFrame(this.gameLoop);
	  }
	
	  gameLoop() {
	    this.firstBike.move().draw(context).clearTail(context);
	    this.secondBike.move().draw(context).clearTail(context);
	
	    requestAnimationFrame(this.gameLoop);
	    this.firstBike.sideCollision();
	    this.firstBike.verticalCollision();
	    this.secondBike.sideCollision();
	    this.secondBike.verticalCollision();
	    this.secondBike.collisionDetection(this.firstBike);
	    this.firstBike.collisionDetection(this.secondBike);
	    this.secondBike.distanceBetweenSelf();
	    this.firstBike.distanceBetweenSelf();
	
	    if (this.firstBike.crashed && this.secondBike.crashed) {
	      this.playAudio(explosionTune);
	      this.firstBike.lives -= 1;
	      this.secondBike.lives -= 1;
	      this.playerReset();
	      this.pause(1000);
	      if (this.firstBike.lives === 0) {
	        context.clearRect(0, 0, canvas.width, canvas.height);
	        this.endGame('PLAYER TWO WINS!', 'magenta');
	        this.pause(5000);
	        location.reload();
	      }
	      if (this.secondBike.lives === 0) {
	        context.clearRect(0, 0, canvas.width, canvas.height);
	        this.endGame('PLAYER ONE WINS!', 'cyan');
	        this.pause(5000);
	        location.reload();
	      }
	      return;
	    }
	
	    if (this.firstBike.crashed) {
	      this.playAudio(explosionTune);
	      this.firstBike.lives -= 1;
	      this.playerReset();
	      this.pause(1000);
	      if (this.firstBike.lives === 0) {
	        context.clearRect(0, 0, canvas.width, canvas.height);
	        this.endGame('PLAYER TWO WINS!', 'magenta');
	        this.pause(5000);
	        location.reload();
	      }
	      return;
	    }
	
	    if (this.secondBike.crashed) {
	      this.playAudio(explosionTune);
	      this.secondBike.lives -= 1;
	      this.playerReset();
	      this.pause(1000);
	      if (this.secondBike.lives === 0) {
	        context.clearRect(0, 0, canvas.width, canvas.height);
	        this.endGame('PLAYER ONE WINS!', 'cyan');
	        this.pause(5000);
	        location.reload();
	      }
	      return;
	    }
	    this.firstBike.loseLife(playerOneLives);
	    this.secondBike.loseLife(playerTwoLives);
	  }
	
	  playAudio(audio) {
	    audio.play();
	  }
	
	  playerReset() {
	    // this.stopAudio(gameTune);
	    this.playAudio(explosionTune);
	    this.firstBike.tail = [];
	    this.secondBike.tail = [];
	    this.secondBike.crashed = false;
	    this.firstBike.crashed = false;
	    context.clearRect(0, 0, canvas.width, canvas.height);
	    this.playAudio(gameTune);
	    this.firstBike.x = canvas.width * .07;
	    this.firstBike.y = canvas.height / 2;
	    this.secondBike.x = canvas.width * .93;
	    this.secondBike.y = canvas.height / 2;
	    this.firstBike.xDir = 3;
	    this.firstBike.yDir = 0;
	    this.secondBike.xDir = -3;
	    this.secondBike.yDir = 0;
	    this.firstBike.draw(context);
	    this.secondBike.draw(context);
	  }
	
	  endGame(winner, color) {
	    context.clearRect(0, 0, canvas.width, canvas.height);
	    context.font = "900 50px Orbitron";
	    context.fillStyle = color;
	    context.textAlign = "center";
	    context.fillText(winner, canvas.width / 2, canvas.height / 3);
	  }
	
	  pause(miliseconds) {
	    var currentTime = new Date().getTime();
	    while (currentTime + miliseconds >= new Date().getTime()) {}
	  }
	
	}
	
	module.exports = Game;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	class Bike {
	  constructor(x, y, radius, arcStart, xDir, yDir, color) {
	    this.x = x;
	    this.y = y;
	    this.radius = radius;
	    this.arcStart = arcStart;
	    this.xDir = xDir;
	    this.yDir = yDir;
	    this.color = color;
	    this.pOneDirection = this.pOneDirection.bind(this);
	    this.pTwoDirection = this.pTwoDirection.bind(this);
	    this.tail = [];
	    this.crashed = false;
	    this.lives = 5;
	  }
	
	  draw(context) {
	    context.beginPath();
	    context.arc(this.x, this.y, this.radius, this.arcStart, Math.PI * 2, false);
	    context.fill();
	    context.fillStyle = this.color;
	    return this;
	  }
	
	  move() {
	    this.x += this.xDir;
	    this.y += this.yDir;
	    if (this.xDir === 0) {
	      for (var i = 0; i <= Math.abs(this.yDir) - 1; i++) {
	        var increment = this.yDir > 0 ? i : -i;
	        this.tail.push({ x: this.x, y: this.y + increment });
	        console.log(this.tail);
	      }
	    } else {
	      for (var i = 0; i <= Math.abs(this.xDir) - 1; i++) {
	        var increment = this.xDir > 0 ? i : -i;
	        this.tail.push({ x: this.x + increment, y: this.y });
	      }
	    }
	    return this;
	  }
	
	  clearTail(context) {
	    if (this.tail.length > 1200) {
	      var velocity = this.getVelocity();
	      for (var i = 0; i < velocity; i++) {
	        var coords = this.tail.shift();
	        context.beginPath();
	        context.clearRect(coords.x - this.radius - 1, coords.y - this.radius - 1, this.radius * 2 + 2, this.radius * 2 + 2);
	        context.closePath();
	      }
	    }
	  }
	
	  changeDirection(new_xDir, new_yDir) {
	    if (this.preventSelfTrace(new_xDir, new_yDir)) {
	      return;
	    }
	    this.xDir = new_xDir;
	    this.yDir = new_yDir;
	  }
	
	  pTwoDirection(e) {
	    //left
	    if (e.keyCode == 37) {
	      e.preventDefault();
	      this.playAudio(turnTune);
	      this.changeDirection(-3, 0);
	    }
	
	    //up
	    if (e.keyCode == 38) {
	      e.preventDefault();
	      this.playAudio(turnTune);
	      this.changeDirection(0, -3);
	    }
	
	    //right
	    if (e.keyCode == 39) {
	      e.preventDefault();
	      this.playAudio(turnTune);
	      this.changeDirection(3, 0);
	    }
	
	    //down
	    if (e.keyCode == 40) {
	      e.preventDefault();
	      this.playAudio(turnTune);
	      this.changeDirection(0, 3);
	    }
	  }
	
	  pOneDirection(e) {
	    //left
	    if (e.keyCode == 65) {
	      this.playAudio(turnTune);
	      this.changeDirection(-3, 0);
	    }
	
	    //up
	    if (e.keyCode == 87) {
	      this.playAudio(turnTune);
	      this.changeDirection(0, -3);
	    }
	
	    //right
	    if (e.keyCode == 68) {
	      this.playAudio(turnTune);
	      this.changeDirection(3, 0);
	    }
	
	    //down
	    if (e.keyCode == 83) {
	      this.playAudio(turnTune);
	      this.changeDirection(0, 3);
	    }
	  }
	
	  sideCollision() {
	    if (this.x < 10 || this.x > 840) {
	      this.xDir = 0;
	      this.yDir = 0;
	      this.crashed = true;
	    }
	  }
	
	  verticalCollision() {
	    if (this.y < 10 || this.y > 625) {
	      this.xDir = 0;
	      this.yDir = 0;
	      this.crashed = true;
	    }
	  }
	
	  distanceBetween(x1, y1, x2, y2) {
	    let xDistance = x2 - x1;
	    let yDistance = y2 - y1;
	    return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
	  }
	
	  distanceBetweenSelf() {
	    var velocity = this.getVelocity();
	    for (var i = 0; i < this.tail.length - velocity * this.radius - 1; i++) {
	      let trailCoordinate = this.tail[i];
	      if (this.distanceBetween(this.x, this.y, trailCoordinate.x, trailCoordinate.y) < this.radius * 2) {
	        this.crashed = true;
	      }
	    }
	  }
	
	  collisionDetection(oppositeBike) {
	    console.log(oppositeBike);
	    for (var i = 0; i < oppositeBike.tail.length - 1; i++) {
	      let trailCoordinate = oppositeBike.tail[i];
	      if (this.distanceBetween(this.x, this.y, trailCoordinate.x, trailCoordinate.y) < this.radius * 2) {
	        this.crashed = true;
	      }
	    }
	    return false;
	  }
	
	  preventSelfTrace(xDir, yDir) {
	    var velocity = this.getVelocity();
	    if (Math.abs(this.xDir - xDir) > velocity || Math.abs(this.yDir - yDir) > velocity) {
	      return true;
	    }
	    return false;
	  }
	
	  loseLife(domEl) {
	    domEl.innerText = this.lives;
	  }
	
	  getVelocity() {
	    return Math.max(Math.abs(this.xDir), Math.abs(this.yDir));
	  }
	
	  playAudio(audio) {
	    audio.play();
	  }
	}
	
	// const turnTune = document.getElementById('turn-tune');
	module.exports = Bike;

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,